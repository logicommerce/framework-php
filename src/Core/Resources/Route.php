<?php

namespace FWK\Core\Resources;

use FWK\Enums\RouteType;
use SDK\Dtos\Common\Route as SDKRoute;
use SDK\Core\Enums\Traits\EnumResolverTrait;
use FWK\Enums\RouteItems;
use SDK\Dtos\Catalog\Page\Page;
use SDK\Enums\PageType;
use SDK\Core\Resources\Cookie;
use SDK\Enums\RouteType as EnumsRouteType;

/**
 * This is the Route class for the Routes that are not generated by the API.
 *
 * Extends SDKRoute and overrides some methods.
 *
 * @see Route::getType()
 * @see Route::getStatus()
 * @see Route::getDevice()
 * @see Route::getOS()
 *
 * @see SDKRoute
 * @see EnumResolverTrait
 *
 * @package FWK\Core\Resources
 */
class Route extends SDKRoute {
    use EnumResolverTrait;

    public const UNDEFINED = 'undefined';

    private $enumClass = RouteType::class;

    private ?Page $page = null;

    /**
     * Route constructor.
     * Overrides __construct() in SDKRoute
     *
     * @param array $data
     *            Array that contains all the values to initialize the Route object.
     * @param Page $page
     *            Page to be set to the Route object.                        
     *            
     * @see SDKRoute::__construct()
     */
    public function __construct(array $data = [], Page $page = null) {
        parent::__construct($data);
        if (isset($data[RouteItems::ENUM_CLASS])) {
            $class = Loader::EnumInternalRouteType($data[RouteItems::ENUM_CLASS]);
            $this->enumClass = $class;
        }
        $this->page = $page;
    }

    /**
     * Overrides getType() in SDKRoute
     * Analizes if the Route type is page for return the pageType as type
     * 
     * 
     * 
     * @see SDKRoute::getType()
     */
    public function getType(): string { // ENUM
        if ($this->page !== null && $this->page->getPageType() != PageType::DEFAULT) {
            if ($this->page->getPageType() === PageType::SHOPPING_CART) {
                return RouteType::CHECKOUT_BASKET;
            } else {
                if (in_array($this->page->getPageType(), [PageType::CUSTOM, PageType::MODULE, PageType::NEWSLETTER, PageType::SUBPAGES, PageType::SITEMAP])) {
                    return EnumsRouteType::PAGE . '_' . $this->page->getPageType();
                } else {
                    return $this->page->getPageType();
                }
            }
        }
        return $this->getEnum($this->enumClass, $this->type, RouteType::NOT_FOUND);
    }

    /**
     * Overrides getId() in SDKRoute
     * Analizes if the Route type is page and pageType is RouteType::CATEGORY for return the category Id
     * 
     * 
     * 
     * @see SDKRoute::getId()
     */
    public function getId(): int {
        if ($this->page !== null && $this->page->getPageType() === RouteType::CATEGORY) {
            return $this->page->getItemId();
        }
        return $this->id;
    }

    /**
     * This method returns the page.
     *
     * @return NULL|Page
     */
    public function getPage(): ?Page {
        return $this->page;
    }

    /**
     * @see SDKRoute::getStatus()
     */
    public function getStatus(): int {
        if ($this->getType() === RouteType::NOT_FOUND) {
            return 404;
        }
        return parent::getStatus();
    }

    /**
     * This method returns the device.
     *
     * @return string
     */
    public static function getDevice(): string {
        return Cookie::exist('Device') ? Cookie::get('Device') : Utils::getDevice();
    }

    /**
     * This method returns the OS.
     *
     * @return string
     */
    public static function getOS(): string {
        return Cookie::exist('OS') ? Cookie::get('OS') : self::UNDEFINED;
    }
}
